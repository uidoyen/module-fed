{"version":3,"file":"focus-trap.esm.min.js","sources":["../index.js"],"sourcesContent":["import { tabbable, isFocusable } from 'tabbable';\n\nlet activeFocusDelay;\n\nconst activeFocusTraps = (function () {\n  const trapQueue = [];\n  return {\n    activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        const activeTrap = trapQueue[trapQueue.length - 1];\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n\n    deactivateTrap(trap) {\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    },\n  };\n})();\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\nconst createFocusTrap = function (elements, userOptions) {\n  const doc = document;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    ...userOptions,\n  };\n\n  const state = {\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying the first and last tabbable nodes in all containers/groups in\n    //  the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{ firstTabbableNode: HTMLElement|null, lastTabbableNode: HTMLElement|null }>}\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  const containersContain = function (element) {\n    return state.containers.some((container) => container.contains(element));\n  };\n\n  const getNodeForOption = function (optionName) {\n    const optionValue = config[optionName];\n    if (!optionValue) {\n      return null;\n    }\n\n    let node = optionValue;\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue);\n      if (!node) {\n        throw new Error(`\\`${optionName}\\` refers to no known node`);\n      }\n    }\n\n    if (typeof optionValue === 'function') {\n      node = optionValue();\n      if (!node) {\n        throw new Error(`\\`${optionName}\\` did not return a node`);\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node;\n\n    if (getNodeForOption('initialFocus') !== null) {\n      node = getNodeForOption('initialFocus');\n    } else if (containersContain(doc.activeElement)) {\n      node = doc.activeElement;\n    } else {\n      const firstTabbableGroup = state.tabbableGroups[0];\n      const firstTabbableNode =\n        firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n      node = firstTabbableNode || getNodeForOption('fallbackFocus');\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.tabbableGroups = state.containers\n      .map((container) => {\n        const tabbableNodes = tabbable(container);\n\n        if (tabbableNodes.length > 0) {\n          return {\n            firstTabbableNode: tabbableNodes[0],\n            lastTabbableNode: tabbableNodes[tabbableNodes.length - 1],\n          };\n        }\n\n        return undefined;\n      })\n      .filter((group) => !!group); // remove groups with no tabbable nodes\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus')\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === doc.activeElement) {\n      return;\n    }\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus');\n\n    return node ? node : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    if (containersContain(e.target)) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (config.clickOutsideDeactivates) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus: config.returnFocusOnDeactivate && !isFocusable(e.target),\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (\n      config.allowOutsideClick &&\n      (typeof config.allowOutsideClick === 'boolean'\n        ? config.allowOutsideClick\n        : config.allowOutsideClick(e))\n    ) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  const checkFocusIn = function (e) {\n    const targetContained = containersContain(e.target);\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || e.target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = e.target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkTab = function (e) {\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      if (e.shiftKey) {\n        const startOfGroupIndex = state.tabbableGroups.findIndex(\n          ({ firstTabbableNode }) => e.target === firstTabbableNode\n        );\n\n        if (startOfGroupIndex >= 0) {\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        const lastOfGroupIndex = state.tabbableGroups.findIndex(\n          ({ lastTabbableNode }) => e.target === lastTabbableNode\n        );\n\n        if (lastOfGroupIndex >= 0) {\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    }\n  };\n\n  const checkKey = function (e) {\n    if (config.escapeDeactivates !== false && isEscapeEvent(e)) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n\n  const checkClick = function (e) {\n    if (config.clickOutsideDeactivates) {\n      return;\n    }\n\n    if (containersContain(e.target)) {\n      return;\n    }\n\n    if (\n      config.allowOutsideClick &&\n      (typeof config.allowOutsideClick === 'boolean'\n        ? config.allowOutsideClick\n        : config.allowOutsideClick(e))\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    activeFocusDelay = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      updateTabbableNodes();\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      const onActivate =\n        activateOptions && activateOptions.onActivate\n          ? activateOptions.onActivate\n          : config.onActivate;\n      if (onActivate) {\n        onActivate();\n      }\n\n      addListeners();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      clearTimeout(activeFocusDelay);\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n\n      activeFocusTraps.deactivateTrap(trap);\n\n      const onDeactivate =\n        deactivateOptions && deactivateOptions.onDeactivate !== undefined\n          ? deactivateOptions.onDeactivate\n          : config.onDeactivate;\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      const returnFocus =\n        deactivateOptions && deactivateOptions.returnFocus !== undefined\n          ? deactivateOptions.returnFocus\n          : config.returnFocusOnDeactivate;\n\n      if (returnFocus) {\n        delay(function () {\n          tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n        });\n      }\n\n      return this;\n    },\n\n    pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n\n      return this;\n    },\n\n    unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"],"names":["activeFocusDelay","trapQueue","activeFocusTraps","activateTrap","trap","length","activeTrap","pause","trapIndex","indexOf","splice","push","deactivateTrap","unpause","delay","fn","setTimeout","createFocusTrap","elements","userOptions","doc","document","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","containersContain","element","some","container","contains","getNodeForOption","optionName","optionValue","node","querySelector","Error","getInitialFocusNode","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbableNodes","tabbable","lastTabbableNode","filter","group","tryFocus","focus","preventScroll","tagName","toLowerCase","select","isSelectableInput","checkPointerDown","e","target","clickOutsideDeactivates","deactivate","returnFocus","isFocusable","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","checkKey","key","keyCode","isEscapeEvent","isTabEvent","destinationNode","shiftKey","startOfGroupIndex","findIndex","destinationGroupIndex","lastOfGroupIndex","checkTab","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","activate","activateOptions","this","onActivate","deactivateOptions","clearTimeout","onDeactivate","undefined","previousActiveElement","updateContainerElements","containerElements","elementsAsArray","concat","Boolean"],"mappings":"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"}